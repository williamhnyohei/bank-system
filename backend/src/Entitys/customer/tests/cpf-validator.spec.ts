import { validate } from 'class-validator';
import { CpfValidator } from '../validator/cpf.validator';
import { Validate } from 'class-validator';

class TestCpfDto {
  @Validate(CpfValidator, { message: 'CPF inv√°lido' })
  cpf: string;
}

describe('CpfValidator', () => {
  it('deve aceitar um CPF v√°lido', async () => {
    const dto = new TestCpfDto();
    dto.cpf = '52998224725'; // CPF v√°lido ‚úÖ


    const errors = await validate(dto);
    console.log(errors); // üëâ Verifica se h√° erros

    expect(errors.length).toBe(0);
  });

  it('deve rejeitar um CPF inv√°lido', async () => {
    const dto = new TestCpfDto();
    dto.cpf = '12345678900'; // CPF inv√°lido

    const errors = await validate(dto);
    console.log(errors);

    expect(errors.length).toBeGreaterThan(0);
  });

  it('deve rejeitar um CPF com caracteres inv√°lidos', async () => {
    const dto = new TestCpfDto();
    dto.cpf = 'abc.def.ghi-jk'; // Formato completamente errado

    const errors = await validate(dto);
    console.log(errors);

    expect(errors.length).toBeGreaterThan(0);
  });

  it('deve rejeitar um CPF com menos de 11 d√≠gitos', async () => {
    const dto = new TestCpfDto();
    dto.cpf = '12345'; // Incompleto

    const errors = await validate(dto);
    console.log(errors);

    expect(errors.length).toBeGreaterThan(0);
  });

  it('deve rejeitar um CPF com todos os n√∫meros iguais', async () => {
    const dto = new TestCpfDto();
    dto.cpf = '11111111111'; // CPF inv√°lido porque todos os d√≠gitos s√£o iguais

    const errors = await validate(dto);
    console.log(errors);

    expect(errors.length).toBeGreaterThan(0);
  });
});
